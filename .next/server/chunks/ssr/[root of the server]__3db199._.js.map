{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///mnt/work/Templates/dashboard/store/slices/panelSlice.ts"],"sourcesContent":["import { ControlPanelSliceTypes } from '@/types';\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState: ControlPanelSliceTypes = {\n    isVisibleStatus: true,\n    sliderValueNumber: 25,\n    sourceBoxData: {\n      label: 'books',\n    }\n};\n\nexport const panelSlice = createSlice({\n    name: 'control-panel',\n    initialState,\n    reducers: {\n        switchVisibleStatus: (state)=> {\n          state.isVisibleStatus = !state.isVisibleStatus\n        },\n        \n        changeSliderValueNumber: (state, action) => {\n          state.sliderValueNumber = action.payload\n        },\n\n        sourceBoxData: (state, action)=> {\n           state.sourceBoxData = {\n            label: action.payload.label,\n           }\n        },\n    }\n});\n\n\nexport const panelActions = panelSlice.actions;\n\nexport default panelSlice.reducer;\n"],"names":[],"mappings":";;;;;AACA;;AAEA,MAAM,eAAuC;IACzC,iBAAiB;IACjB,mBAAmB;IACnB,eAAe;QACb,OAAO;IACT;AACJ;AAEO,MAAM,aAAa,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE;IAClC,MAAM;IACN;IACA,UAAU;QACN,qBAAqB,CAAC;YACpB,MAAM,eAAe,GAAG,CAAC,MAAM,eAAe;QAChD;QAEA,yBAAyB,CAAC,OAAO;YAC/B,MAAM,iBAAiB,GAAG,OAAO,OAAO;QAC1C;QAEA,eAAe,CAAC,OAAO;YACpB,MAAM,aAAa,GAAG;gBACrB,OAAO,OAAO,OAAO,CAAC,KAAK;YAC5B;QACH;IACJ;AACJ;AAGO,MAAM,eAAe,WAAW,OAAO;uCAE/B,WAAW,OAAO"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///mnt/work/Templates/dashboard/store/slices/notes.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { NotesSlice } from \"@/types\";\n\nconst initialState: NotesSlice = {\n    noteData: [{id: ''  , text: ''}],\n};\n\nexport const notesSlice = createSlice({\n    name: \"notes\",\n    initialState,\n    reducers: {\n        createNewNote: (state, action)=> {\n            state.noteData = action.payload;\n            // console.log(state, action.payload)\n        }\n    }\n});\n\nexport const notesActions = notesSlice.actions;\n\nexport default notesSlice.reducer;"],"names":[],"mappings":";;;;;AAAA;;AAGA,MAAM,eAA2B;IAC7B,UAAU;QAAC;YAAC,IAAI;YAAM,MAAM;QAAE;KAAE;AACpC;AAEO,MAAM,aAAa,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE;IAClC,MAAM;IACN;IACA,UAAU;QACN,eAAe,CAAC,OAAO;YACnB,MAAM,QAAQ,GAAG,OAAO,OAAO;QAC/B,qCAAqC;QACzC;IACJ;AACJ;AAEO,MAAM,eAAe,WAAW,OAAO;uCAE/B,WAAW,OAAO"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///mnt/work/Templates/dashboard/store/store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\n// import SliderSlice from '@/features/slices/SliderSlice';\nimport { panelReducer, notesReducer } from \"@/store/slices\";\n\nexport const store = configureStore({\n  reducer: {\n    panel: panelReducer,\n    notes: notesReducer,\n    // active: ActiveReducer\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"],"names":[],"mappings":";;;AACA,2DAA2D;AAC3D;AAFA;AAEA;AAAA;;;AAEO,MAAM,QAAQ,CAAA,GAAA,uLAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,OAAO,wKAAA,CAAA,eAAY;QACnB,OAAO,mKAAA,CAAA,eAAY;IAErB;AACF"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///mnt/work/Templates/dashboard/app/layout.tsx"],"sourcesContent":["\"use client\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"@/store/store\";\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Provider store={store}>{children}</Provider>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AADA;AAFA;;;;AAKe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC;QAAK,MAAK;kBACT,cAAA,8OAAC;sBACC,cAAA,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,OAAO,8GAAA,CAAA,QAAK;0BAAG;;;;;;;;;;;;;;;;AAIjC"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}